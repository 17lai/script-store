#!/bin/bash
#=============================================================
# https://github.com/cgkings/script-store
# bash <(curl -sL git.io/cg_script_option)
# File Name:
# Author: cgkings
# Created Time : 2020.12.25
# Description:
# System Required: Debian/Ubuntu
# Version: 1.0
#=============================================================

curr_date=$(date "+%Y-%m-%d %H:%M:%S")

# Predefined env
#export DEBIAN_FRONTEND=noninteractive
#export COMPOSER_ALLOW_SUPERUSER=1

################## 字体格式设置 ##################
setcolor() {
  black=$(tput setaf 0)
  red=$(tput setaf 1)
  # shellcheck disable=SC2034
  green=$(tput setaf 2)
  # shellcheck disable=SC2034
  yellow=$(tput setaf 3)
  bold=$(tput bold)
  # shellcheck disable=SC2034
  jiacu=${normal}${bold}
  # shellcheck disable=SC2034
  blue=$(tput setaf 4)
  # shellcheck disable=SC2034
  magenta=$(tput setaf 5)
  # shellcheck disable=SC2034
  cyan=$(tput setaf 6)
  white=$(tput setaf 7)
  normal=$(tput sgr0)
  # shellcheck disable=SC2034
  on_black=$(tput setab 0)
  on_red=$(tput setab 1)
  on_green=$(tput setab 2)
  on_yellow=$(tput setab 3)
  on_blue=$(tput setab 4)
  on_magenta=$(tput setab 5)
  on_cyan=$(tput setab 6)
  on_white=$(tput setab 7)
  # shellcheck disable=SC2034
  shanshuo=$(tput blink)
  # shellcheck disable=SC2034
  wuguangbiao=$(tput civis)
  # shellcheck disable=SC2034
  guangbiao=$(tput cnorm)
  # shellcheck disable=SC2034
  underline=$(tput smul)
  # shellcheck disable=SC2034
  reset_underline=$(tput rmul)
  # shellcheck disable=SC2034
  dim=$(tput dim)
  standout=$(tput smso)
  # shellcheck disable=SC2034
  reset_standout=$(tput rmso)
  # shellcheck disable=SC2034
  title=${standout}
  # shellcheck disable=SC2034
  baihuangse=${white}${on_yellow}
  # shellcheck disable=SC2034
  bailanse=${white}${on_blue}
  # shellcheck disable=SC2034
  bailvse=${white}${on_green}
  # shellcheck disable=SC2034
  baiqingse=${white}${on_cyan}
  # shellcheck disable=SC2034
  baihongse=${white}${on_red}
  # shellcheck disable=SC2034
  baizise=${white}${on_magenta}
  # shellcheck disable=SC2034
  heibaise=${black}${on_white}
  # shellcheck disable=SC2034
  heihuangse=${on_yellow}${black}
}

################## 检查系统要求 ##################
check_sys() {
  if [[ $(id -u) != 0 ]]; then
    whiptail --title "user not supported(用户权限不支持)" --msgbox "请使用root或者sudo用户运行,Please run this script as root or sudoer." 8 68
    echo -e "${red}Error:请使用root或者sudo用户运行,Please run this script as root or sudoer!${normal}"
    exit 1
  fi
  if [[ $(uname -m 2> /dev/null) != x86_64 ]]; then
    whiptail --title "hardware not supported(硬件不支持)" --msgbox "本脚本仅适用于x86_64机器,Please run this script on x86_64 machine." 8 68
    echo -e "${red}Error:本脚本仅适用于x86_64机器,Please run this script on x86_64 machine!${normal}"
    exit 1
  fi
  if [[ -d "/proc/vz" ]]; then
    whiptail --title "Virtualization technology not supported(虚拟化架构不支持)" --msgbox "本脚本暂时不支持openVZ架构,Please run this script on KVM." 8 68
    echo -e "${red}Error:本脚本暂时不支持openVZ架构!${normal}"
    exit 1
  fi
  if [[ $(free -m | grep Mem | awk '{print $2}' 2> /dev/null) -le "100" ]]; then
    whiptail --title "RAM not enough(内存不足)" --msgbox "本脚本需要至少100MB内存才能正常运作,Please run this script on machine with more than 100MB total ram." 8 68
    echo -e "${red}Error:本脚本需要至少100MB内存才能正常运作,Please run this script on machine with more than 100MB total ram!${normal}"
    exit 1
  fi
  if [[ $(df $PWD | awk '/[0-9]%/{print $(NF-2)}' 2> /dev/null) -le "3000000" ]]; then
    whiptail --title "free disk space not enough(硬盘可用空间不足)" --msgbox "本脚本需要至少3GB硬盘可用空间才能正常运作,Please run this script on machine with more than 3G free disk space." 8 68
    echo -e "${red}Error:本脚本需要至少3GB硬盘可用空间才能正常运作,Please run this script on machine with more than 3G free disk space!${normal}"
    exit 1
  fi
  #Disable cloud-init
  rm -rf /lib/systemd/system/cloud*
  ## 卸载腾讯云云盾
  if [[ -d /usr/local/qcloud ]]; then
    #disable tencent cloud process
    rm -rf /usr/local/sa
    rm -rf /usr/local/agenttools
    rm -rf /usr/local/qcloud
    #disable huawei cloud process
    rm -rf /usr/local/telescope
  fi
  ## 卸载阿里云云盾
  if [[ -d /usr/local/aegis ]]; then
    TERM=ansi whiptail --title "阿里云监控卸载" --infobox "检测到阿里云恶意监控服务，开始卸载..." 7 68
    echo -e "${curr_date} ${red}[INFO]${normal} Uninstall Aliyun aegis ing"
    iptables -I INPUT -s 140.205.201.0/28 -j DROP &> /dev/null
    iptables -I INPUT -s 140.205.201.16/29 -j DROP &> /dev/null
    iptables -I INPUT -s 140.205.201.32/28 -j DROP &> /dev/null
    iptables -I INPUT -s 140.205.225.192/29 -j DROP &> /dev/null
    iptables -I INPUT -s 140.205.225.200/30 -j DROP &> /dev/null
    iptables -I INPUT -s 140.205.225.184/29 -j DROP &> /dev/null
    iptables -I INPUT -s 140.205.225.183/32 -j DROP &> /dev/null
    iptables -I INPUT -s 140.205.225.206/32 -j DROP &> /dev/null
    iptables -I INPUT -s 140.205.225.205/32 -j DROP &> /dev/null
    iptables -I INPUT -s 140.205.225.195/32 -j DROP &> /dev/null
    iptables -I INPUT -s 140.205.225.204/32 -j DROP &> /dev/null
    systemctl stop aegis
    systemctl stop CmsGoAgent.service
    systemctl stop aliyun
    systemctl stop cloud-config
    systemctl stop cloud-final
    systemctl stop cloud-init-local.service
    systemctl stop cloud-init
    systemctl stop ecs_mq
    systemctl stop exim4
    systemctl stop apparmor
    systemctl stop sysstat
    systemctl disable aegis
    systemctl disable CmsGoAgent.service
    systemctl disable aliyun
    systemctl disable cloud-config
    systemctl disable cloud-final
    systemctl disable cloud-init-local.service
    systemctl disable cloud-init
    systemctl disable ecs_mq
    systemctl disable exim4
    systemctl disable apparmor
    systemctl disable sysstat
    killall -9 aegis_cli > /dev/null 2>&1
    killall -9 aegis_update > /dev/null 2>&1
    killall -9 aegis_cli > /dev/null 2>&1
    killall -9 AliYunDun > /dev/null 2>&1
    killall -9 AliHids > /dev/null 2>&1
    killall -9 AliHips > /dev/null 2>&1
    killall -9 AliYunDunUpdate > /dev/null 2>&1
    rm -rf /etc/init.d/aegis
    rm -rf /etc/systemd/system/CmsGoAgent*
    rm -rf /etc/systemd/system/aliyun*
    rm -rf /lib/systemd/system/cloud*
    rm -rf /lib/systemd/system/ecs_mq*
    rm -rf /usr/local/aegis
    rm -rf /usr/local/cloudmonitor
    rm -rf /usr/sbin/aliyun*
    rm -rf /sbin/ecs_mq_rps_rfs
    for ((var = 2; var <= 5; var++)); do
      if [ -d "/etc/rc${var}.d/" ]; then
        rm -rf "/etc/rc${var}.d/S80aegis"
      elif [ -d "/etc/rc.d/rc${var}.d" ]; then
        rm -rf "/etc/rc.d/rc${var}.d/S80aegis"
      fi
    done
    apt-get purge sysstat exim4 chrony aliyun-assist -y
    systemctl daemon-reload
    echo "nameserver 1.1.1.1" > '/etc/resolv.conf'
  fi
}

################## 检查rclone&fclone安装情况 ##################
check_rclone() {
  ###file-max设置，解决too many open files问题###
  if [ "$(ulimit -n)" != 65535 ]; then
    echo -e "\nfs.file-max = 6553500" >> /etc/sysctl.conf
    sysctl -p
    cat >> /etc/security/limits.conf << EOF

* soft memlock unlimited
* hard memlock unlimited
* soft nofile 65535
* hard nofile 65535
* soft nproc 65535
* hard nproc 65535

root soft memlock unlimited
root hard memlock unlimited
root soft nofile 65535
root hard nofile 65535
root soft nproc 65535
root hard nproc 65535
EOF
    echo -e "\nsession required pam_limits.so" >> /etc/pam.d/common-session
    echo -e "${curr_date} [INFO] file_max 修改成功" >> /root/install_log.txt
  fi
  #检查fclone安装状态，没装就安装
  if [ -z "$(command -v fclone)" ]; then
    echo -e "${curr_date} ${red}fclone${normal} 不存在.正在为您安装，请稍后..."
    wget -qN https://github.com/cgkings/script-store/raw/master/tools/fclone-v0.4.1-linux-amd64.zip && unzip -qo fclone-v0.4.1-linux-amd64.zip -d /usr/bin/ && rm -f fclone-v0.4.1-linux-amd64.zip && chmod +x /usr/bin/fclone && fclone version
  fi
  #检查rclone安装状态，没装就安装
  if [ -z "$(command -v rclone)" ]; then
    echo -e "${curr_date} ${red}rclone${normal} 不存在.正在为您安装，请稍后..."
    bash <(curl -L -s https://rclone.org/install.sh) > /dev/null && rclone version
  fi
  #检查rclone的conf文件是否存在，不存在就要求你退出脚本自行配置
  if [ ! -f /root/.config/rclone/rclone.conf ]; then
    echo -e "${curr_date} ${red}未检测到rclone配置文件.请先建立remote后重新运行脚本.${normal}" && exit 1
  #else
  #检查conf文件内root_folder_id是否为空，如不为空就全部清空
  #  [ -n "$(awk '/root_folder_id/{print $3}' ~/.config/rclone/rclone.conf)" ] && sed -i "s/root_folder_id = .*$/root_folder_id = /g" ~/.config/rclone/rclone.conf
  fi
  echo -e "${curr_date} [INFO] rclone&fclone已安装" >> /root/install_log.txt
}

################## 检查安装情况 ##################
check_release() {
  if [[ -f /etc/redhat-release ]]; then
    release='centos'
  elif grep -q -E -i "debian" /etc/issue; then
    release='debian'
  elif grep -q -E -i "armbian" /etc/issue; then
    release='armdebian'
  elif grep -q -E -i "ubuntu" /etc/issue; then
    release='ubuntu'
  elif cat  | grep -q -E -i "redhat|red hat|centos" /etc/issue; then
    release='centos'
  fi
}

check_command() {
  check_release
  
  for command_arges in $*; do
    command_status=$(dpkg --get-selections | grep "$command_arges")
    if [ -z "$command_status" ]; then
      echo -e "${curr_date} ${red}$command_arges${normal} 不存在.正在为您安装，请稍后..."
      if [[ "${release}" = "centos" ]]; then
        yum install "$command_arges" -y > /dev/null
        echo -e "${curr_date} [INFO] $command_arges 已完成安装动作，可使用< dpkg --get-selections | grep $command_arges >命令验证安装结果" >> /root/install_log.txt
      elif [[ "${release}" = "debian" || "${release}" = "ubuntu" || "${release}" = "armdebian" ]]; then
        apt-get install "$command_arges" -y --upgrade > /dev/null
        echo -e "${curr_date} [INFO] $command_arges 已完成安装动作，可使用< dpkg --get-selections | grep $command_arges >命令验证安装结果" >> /root/install_log.txt
      else
        echo -e "${curr_date} ${red}对不起！您的系统暂不支持该脚本，请联系作者做定制优化，谢谢！${normal}"
        exit 1
      fi
    fi
  done
}

################## 检查目录情况 ##################
check_dir_file() {
  if [ "${1:0-1:1}" = "/" ] && [ -d "$1" ]; then
    return 0
  elif [ -f "$1" ]; then
    return 0
  fi
  return 1
}

################## 选择remote ##################[done]
remote_choose() {
  #选择remote
  rclone listremotes | grep -Eo "[0-9A-Za-z-]+" | awk '{ print FNR " " $0}' > ~/.config/rclone/remote_list.txt
  cat << EOF
${red}本地已配置remote列表:${normal}
${red} +-------------------------+${normal}
${red}$(cat /root/.config/rclone/remote_list.txt)${normal}
${red} +-------------------------+${normal}
EOF
  read -r -n1 -p "请选择用于后续操作rclone remote（输入数字即可）：" remote_choose_num
  echo
  #判断是否选择错误
  if [ -z "$(awk '{print $1}' /root/.config/rclone/remote_list.txt | grep "$remote_choose_num")" ]; then
    echo
    echo "输入不正确，请重新输入。"
    echo
    remote_choose
  else
    #选择无误，识别选择的remote
    my_remote=$(awk '{print $2}' /root/.config/rclone/remote_list.txt | sed -n "$remote_choose_num"p)
  fi
}

################## 语言设置 ##################[done]
setlanguage(){
  set +e
  if [[ ! -d /root/script-store/ ]]; then
    mkdir /root/script-store/
    mkdir /etc/certs/
  fi
  if [[ -f /root/script-store/language.json ]]; then
    language="$( jq -r '.language' "/root/script-store/language.json" )"
  fi
  while [[ -z $language ]]; do
  export LANGUAGE="C.UTF-8"
  export LANG="C.UTF-8"
  export LC_ALL="C.UTF-8"
  if (whiptail --title "System Language Setting" --yes-button "中文" --no-button "English" --yesno "系统语言使用中文或英文(Use Chinese or English)?" 8 68); then
  chattr -i /etc/locale.gen
  cat > '/etc/locale.gen' << EOF
zh_CN.UTF-8 UTF-8
en_US.UTF-8 UTF-8
EOF
language="cn"
locale-gen
update-locale
chattr -i /etc/default/locale
  cat > '/etc/default/locale' << EOF
LANGUAGE="zh_CN.UTF-8"
LANG="zh_CN.UTF-8"
LC_ALL="zh_CN.UTF-8"
EOF
#apt-get install manpages-zh -y
  cat > '/root/script-store/language.json' << EOF
{
  "language": "$language"
}
EOF
  else
  chattr -i /etc/locale.gen
  cat > '/etc/locale.gen' << EOF
zh_CN.UTF-8 UTF-8
en_US.UTF-8 UTF-8
EOF
language="en"
locale-gen
update-locale
chattr -i /etc/default/locale
  cat > '/etc/default/locale' << EOF
LANGUAGE="en_US.UTF-8"
LANG="en_US.UTF-8"
LC_ALL="en_US.UTF-8"
EOF
  cat > '/root/script-store/language.json' << EOF
{
  "language": "$language"
}
EOF
fi
done
if [[ $language == "cn" ]]; then
export LANGUAGE="zh_CN.UTF-8"
export LANG="zh_CN.UTF-8"
  else
export LANGUAGE="en_US.UTF-8"
export LANG="en_US.UTF-8"
fi
}

###安装python环境###
check_python(){
check_command python python3 python3-pip python3-distutils #build-essential libncurses5-dev libpcap-dev libffi-dev
  if [ -z "$(command -v virtualenv)" ]; then
    pip3 install -U pip > /dev/null
    hash -d pip3
    pip3 install -U wheel requests scrapy Pillow baidu-api cloudscraper fire setuptools virtualenv > /dev/null
    echo -e "${curr_date} [INFO] pythonh环境已安装" >> /root/install_log.txt
  fi
}
  
  ###安装go环境###
check_go(){
  if [ -z "$(command -v go)" ]; then
    echo -e "${curr_date} ${red}go命令${normal} 不存在.正在为您安装，请稍后..."
    if [ -e /home/go ]; then
      rm -rf /home/go
    fi
    wget -qN https://golang.org/dl/go1.15.6.linux-amd64.tar.gz -O /root/go.tar.gz
    tar -zxf /root/go.tar.gz -C /home && rm -f /root/go.tar.gz
    [ -z "$(grep "export GOROOT=/home/go" /root/.bashrc)" ] && cat >> /root/.bashrc << EOF

export PATH=$PATH:/home/go/bin
export GOROOT=/home/go
export GOPATH=/home/go/gopath
EOF
    source /root/.bashrc
    echo -e "${curr_date} [INFO] go1.15.6环境已安装,go库路径：/home/go/gopath" >> /root/install_log.txt
  fi
}
  
  #安装nodejs环境，使用https://github.com/nodesource/distributions 的npmjs发布源进行安装
check_nodejs(){
  if [ -z "$(command -v node)" ]; then
    if [ -e /usr/local/lib/nodejs ]; then
      rm -rf /usr/local/lib/nodejs
    fi
    bash <(curl -sL deb.nodesource.com/setup_15.x)
    check_command nodejs
    echo -e "${curr_date} [INFO] nodejs&npm已安装,nodejs路径：/usr/local/lib/nodejs" >> /root/install_log.txt
  fi
  npm install npm -g
  if [ -z "$(command -v yarn)" ]; then
    npm install -g yarn n --force
    yarn set version latest
    echo -e "${curr_date} [INFO] yarn&n已安装" >> /root/install_log.txt
  fi
}