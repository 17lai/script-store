#!/bin/bash
#=============================================================
# https://github.com/cgkings/script-store
# bash <(curl -sL git.io/cg_script_option)
# File Name:
# Author: cgkings
# Created Time : 2020.12.25
# Description:
# System Required: Debian/Ubuntu
# Version: 1.0
#=============================================================

curr_date=$(date "+%Y-%m-%d %H:%M:%S")

# Predefined env
#export DEBIAN_FRONTEND=noninteractive
#export COMPOSER_ALLOW_SUPERUSER=1

################## 字体格式设置 ##################
setcolor() {
  # shellcheck disable=SC2034
  black=$(tput setaf 0)
  red=$(tput setaf 1)
  green=$(tput setaf 2)
  # shellcheck disable=SC2034
  yellow=$(tput setaf 3)
  bold=$(tput bold)
  # shellcheck disable=SC2034
  jiacu=${normal}${bold}
  # shellcheck disable=SC2034
  blue=$(tput setaf 4)
  # shellcheck disable=SC2034
  magenta=$(tput setaf 5)
  # shellcheck disable=SC2034
  cyan=$(tput setaf 6)
  # shellcheck disable=SC2034
  white=$(tput setaf 7)
  normal=$(tput sgr0)
  error_message="${curr_date} ${red}[ERROR]${normal}"
  info_message="${curr_date} ${green}[INFO]${normal}"
  debug_message="${curr_date} ${yellow}[DEBUG]${normal}"
}

################## 检查系统要求 ##################
check_sys() {
  if [[ $(id -u) != 0 ]]; then
    whiptail --title "user not supported(用户权限不支持)" --msgbox "请使用root或者sudo用户运行,Please run this script as root or sudoer." 8 68
    echo -e "${error_message} 请使用root或者sudo用户运行,Please run this script as root or sudoer!" | tee -a /root/install_log.txt
    exit 1
  fi
  if [[ $(uname -m 2> /dev/null) != x86_64 ]]; then
    whiptail --title "hardware not supported(硬件不支持)" --msgbox "本脚本仅适用于x86_64机器,Please run this script on x86_64 machine." 8 68
    echo -e "${error_message} 本脚本仅适用于x86_64机器,Please run this script on x86_64 machine!" | tee -a /root/install_log.txt
    exit 1
  fi
  if [[ -d "/proc/vz" ]]; then
    whiptail --title "Virtualization technology not supported(虚拟化架构不支持)" --msgbox "本脚本暂时不支持openVZ架构,Please run this script on KVM." 8 68
    echo -e "${error_message} 本脚本暂时不支持openVZ架构!" | tee -a /root/install_log.txt
    exit 1
  fi
  if [[ $(free -m | grep Mem | awk '{print $2}' 2> /dev/null) -le "100" ]]; then
    whiptail --title "RAM not enough(内存不足)" --msgbox "本脚本需要至少100MB内存才能正常运作,Please run this script on machine with more than 100MB total ram." 8 68
    echo -e "${error_message} 本脚本需要至少100MB内存才能正常运作!" | tee -a /root/install_log.txt
    exit 1
  fi
  #查询系统
  if grep -q -E -i "debian|ubuntu" /etc/issue; then
    echo
  else
    echo -e "${error_message} 本脚本仅支持debian|ubuntu" | tee -a /root/install_log.txt
    exit
  fi
  #if [[ $(df $PWD | awk '/[0-9]%/{print $(NF-2)}' 2> /dev/null) -le "3000000" ]]; then
  #  whiptail --title "free disk space not enough(硬盘可用空间不足)" --msgbox "本脚本需要至少3GB硬盘可用空间才能正常运作,Please run this script on machine with more than 3G free disk space." 8 68
  #  echo -e "${error_message} 本脚本需要至少3GB硬盘可用空间才能正常运作,Please run this script on machine with more than 3G free disk space!"
  #  exit 1
  #fi
}

################## 检查rclone&fclone安装情况 ##################
check_rclone() {
  #检查fclone安装状态，没装就安装
  if [ -z "$(command -v fclone)" ]; then
    echo -e "${debug_message} ${yellow}${jiacu}fclone${normal} 不存在.正在为您安装，请稍等..."
    wget -qN https://github.com/cgkings/script-store/raw/master/tools/fclone && mv -f fclone /usr/bin/ > /dev/null && chmod +x /usr/bin/fclone
    echo -e "${info_message} fclone已安装" | tee -a /root/install_log.txt
  fi
  #检查rclone安装状态，没装就安装
  if [ -z "$(command -v rclone)" ]; then
    echo -e "${debug_message} ${yellow}${jiacu}rclone${normal} 不存在.正在为您安装，请稍等..."
    bash <(curl -sL https://rclone.org/install.sh) > /dev/null
    echo -e "${info_message} rclone已安装" | tee -a /root/install_log.txt
  fi
  #检查rclone的conf文件是否存在，不存在就要求你退出脚本自行配置
  if [ ! -f /root/.config/rclone/rclone.conf ]; then
      echo -e "${error_message} 未检测到rclone配置文件.即rclone无remote,将影响rclone/fclone的使用" | tee -a /root/install_log.txt
      TERM=ansi whiptail --title "初始化异常" --infobox "rclone/fclone已安装，但未检测到rclone配置文件，因本脚本很多功能需要rclone，建议配置rclone后再运行本脚本！" --scrolltext 8 65
      exit 1
  else
    if grep -q "已检测到rclone配置文件" /root/install_log.txt; then
      echo > /dev/null
    else
      echo -e "${info_message} 已检测到rclone配置文件，rclone/fclone可以使用了." | tee -a /root/install_log.txt
    fi
  fi
  ###file-max设置，解决too many open files问题###
  if grep -q "65535" /etc/security/limits.conf; then
    echo > /dev/null
  else
    echo -e "\nfs.file-max = 6553500" >> /etc/sysctl.conf
    sysctl -p
    cat >> /etc/security/limits.conf << EOF

* soft memlock unlimited
* hard memlock unlimited
* soft nofile 65535
* hard nofile 65535
* soft nproc 65535
* hard nproc 65535

root soft memlock unlimited
root hard memlock unlimited
root soft nofile 65535
root hard nofile 65535
root soft nproc 65535
root hard nproc 65535
EOF
    echo -e "\nsession required pam_limits.so" >> /etc/pam.d/common-session
    echo -e "${info_message} file_max 修改成功" | tee -a /root/install_log.txt
  fi
}

################## 检查安装应用情况 ##################
check_command() {
  for command_arges in $*; do
    if [ -z "$(dpkg --get-selections | grep "$command_arges")" ]; then
      echo -e "${debug_message} ${yellow}${jiacu}$command_arges${normal} 不存在.正在为您安装，请稍后..."
      apt-get install "$command_arges" -y --upgrade > /dev/null
      if dpkg --get-selections | grep "$command_arges"; then
        echo -e "${info_message} $command_arges 安装成功！" | tee -a /root/install_log.txt
      else
        echo -e "${error_message} $command_arges 安装失败！" | tee -a /root/install_log.txt
      fi
    fi
  done
}

################## 检查目录情况 ##################
check_dir_file() {
  if [ "${1:0-1:1}" = "/" ] && [ -d "$1" ]; then
    return 0
  elif [ -f "$1" ]; then
    return 0
  fi
  return 1
}

################## 选择remote ##################[done]
remote_choose() {
  #选择remote
  rclone listremotes | grep -Eo "[0-9A-Za-z-]+" | awk '{ print FNR " " $0}' > ~/.config/rclone/remote_list.txt
  remote_list=($(cat ~/.config/rclone/remote_list.txt))
  remote_choose_num=$(whiptail --clear --ok-button "上下键选择,回车键确定" --backtitle "Hi,欢迎使用cg_mount。有关脚本问题，请访问: https://github.com/cgkings/script-store 或者 https://t.me/cgking_s (TG 王大锤)。" --title "remote选择" --menu --nocancel "注：上下键回车选择,ESC退出脚本！" 18 62 10 "${remote_list[@]}" 3>&1 1>&2 2>&3)
  if [ -z "$remote_choose_num" ]; then
    rm -f ~/.config/rclone/remote_list.txt
    myexit 0
  else
    my_remote=$(awk '{print $2}' /root/.config/rclone/remote_list.txt | sed -n "$remote_choose_num"p)
    rm -f ~/.config/rclone/remote_list.txt
  fi
}

################## 选择team drive ##################[done]
td_id_choose() {
  #生成td_id列表
  fclone backend lsdrives "$my_remote": -o separator=';' > ~/.config/rclone/td_list.txt
  #格式化td列表
  sed -i 's/ //g;s/\;/    /g' ~/.config/rclone/td_list.txt
  td_list=($(cat ~/.config/rclone/td_list.txt))
  td_id=$(whiptail --clear --ok-button "选择完毕,进入下一步" --backtitle "Hi,欢迎使用。有关脚本问题，请访问: https://github.com/cgkings/script-store 或者 https://t.me/cgking_s (TG 王大锤)。" --title "Team driver选择" --menu --nocancel "注：上下键回车选择,ESC退出脚本！" 18 62 10 \
    "customize" "我要自定义ID" \
    "${td_list[@]}" 3>&1 1>&2 2>&3)
  if [ -z "$td_id" ]; then
    rm -f ~/.config/rclone/td_list.txt
    myexit 0
  elif [[ "$td_id" == "customize" ]]; then
    td_id=$(whiptail --inputbox --backtitle "Hi,欢迎使用。有关脚本问题，请访问: https://github.com/cgkings/script-store 或者 https://t.me/cgking_s (TG 王大锤)。" --title "自定义挂载ID输入" --nocancel "注：ESC退出" 10 68 3>&1 1>&2 2>&3)
    if [ -z "$td_id" ]; then
      rm -f ~/.config/rclone/td_list.txt
      myexit 0
    else
      rm -f ~/.config/rclone/td_list.txt
    fi
  else
    rm -f ~/.config/rclone/td_list.txt
  fi
}

################## 安装python环境 ##################
check_python() {
  check_command python python3 python3-pip python3-distutils #build-essential libncurses5-dev libpcap-dev libffi-dev
  if [ -z "$(command -v virtualenv)" ]; then
    pip3 install -U pip > /dev/null
    hash -d pip3
    pip3 install -U wheel requests scrapy Pillow baidu-api cloudscraper fire setuptools virtualenv > /dev/null
    echo -e "${info_message} pythonh环境已安装" | tee -a /root/install_log.txt
  fi
}

################## 安装go环境 ##################
check_go() {
  if [ -z "$(command -v go)" ]; then
    echo -e "${debug_message} ${yellow}${jiacu}go${normal} 不存在.正在为您安装，请稍后..."
    if [ -e /home/go ]; then
      rm -rf /home/go
    fi
    wget -qN https://golang.org/dl/go1.15.6.linux-amd64.tar.gz -O /root/go.tar.gz
    tar -zxf /root/go.tar.gz -C /home && rm -f /root/go.tar.gz
    [ -z "$(grep "export GOROOT=/home/go" /root/.bashrc)" ] && cat >> /root/.bashrc << EOF

export PATH=$PATH:/home/go/bin
export GOROOT=/home/go
export GOPATH=/home/go/gopath
EOF
    echo -e "${info_message} go1.15.6环境已安装,go库路径：/home/go/gopath" | tee -a /root/install_log.txt
  fi
}

################## 安装nodejs环境 ##################使用https://github.com/nodesource/distributions 的npmjs发布源进行安装
check_nodejs() {
  if [ -z "$(command -v node)" ]; then
    if [ -e /usr/local/lib/nodejs ]; then
      rm -rf /usr/local/lib/nodejs
    fi
    bash <(curl -sL deb.nodesource.com/setup_15.x)
    check_command nodejs
    npm install npm -g
    echo -e "${info_message} nodejs&npm已安装,nodejs路径：/usr/local/lib/nodejs" | tee -a /root/install_log.txt
  fi
  if [ -z "$(command -v yarn)" ]; then
    npm install -g yarn n --force
    yarn set version latest
    echo -e "${info_message} yarn&n已安装" | tee -a /root/install_log.txt
  fi
}

################## 检查youtube-dl ##################
check_youtubedl() {
  if [ -z "$(command -v youtube-dl)" ]; then
    echo -e "${debug_message} ${yellow}${jiacu}youtube-dl${normal} 不存在.正在为您安装，请稍后..." | tee -a /root/install_log.txt
    sudo curl -sL https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dl
    sudo chmod a+rx /usr/local/bin/youtube-dl
    echo -e "${info_message} youtube-dl已安装" | tee -a /root/install_log.txt
  fi
}

################## 退出通知 ##################
myexit() {
  if [ "$1" == 0 ]; then
    TERM=ansi whiptail --title "正常退出" --infobox "欢迎使用cgkings（王大锤）系列脚本! Goodbye！" --scrolltext 8 68
    #whiptail --msgbox "The Email User list are $(cat /root/install_log.txt)." --scrolltext 20 40
    sleep 1s
    clear
    exit 0
  elif [ "$1" == 1 ]; then
    TERM=ansi whiptail --title "异常退出" --infobox "异常退出，请查找原因!" 8 68
    exit 1
  fi
}
