#!/bin/bash
#=============================================================
# https://github.com/cgkings/script-store
# File Name:
# Author: cgkings
# Created Time : 2020.12.25
# Description:
# System Required: Debian/Ubuntu
# Version: 1.0
#=============================================================

curr_date=$(date "+%Y-%m-%d %H:%M:%S")

################## 字体格式设置 ##################
setcolor() {
  black=$(tput setaf 0)
  red=$(tput setaf 1)
  # shellcheck disable=SC2034
  green=$(tput setaf 2)
  # shellcheck disable=SC2034
  yellow=$(tput setaf 3)
  bold=$(tput bold)
  # shellcheck disable=SC2034
  jiacu=${normal}${bold}
  # shellcheck disable=SC2034
  blue=$(tput setaf 4)
  # shellcheck disable=SC2034
  magenta=$(tput setaf 5)
  # shellcheck disable=SC2034
  cyan=$(tput setaf 6)
  white=$(tput setaf 7)
  normal=$(tput sgr0)
  # shellcheck disable=SC2034
  on_black=$(tput setab 0)
  on_red=$(tput setab 1)
  on_green=$(tput setab 2)
  on_yellow=$(tput setab 3)
  on_blue=$(tput setab 4)
  on_magenta=$(tput setab 5)
  on_cyan=$(tput setab 6)
  on_white=$(tput setab 7)
  # shellcheck disable=SC2034
  shanshuo=$(tput blink)
  # shellcheck disable=SC2034
  wuguangbiao=$(tput civis)
  # shellcheck disable=SC2034
  guangbiao=$(tput cnorm)
  # shellcheck disable=SC2034
  underline=$(tput smul)
  # shellcheck disable=SC2034
  reset_underline=$(tput rmul)
  # shellcheck disable=SC2034
  dim=$(tput dim)
  standout=$(tput smso)
  # shellcheck disable=SC2034
  reset_standout=$(tput rmso)
  # shellcheck disable=SC2034
  title=${standout}
  # shellcheck disable=SC2034
  baihuangse=${white}${on_yellow}
  # shellcheck disable=SC2034
  bailanse=${white}${on_blue}
  # shellcheck disable=SC2034
  bailvse=${white}${on_green}
  # shellcheck disable=SC2034
  baiqingse=${white}${on_cyan}
  # shellcheck disable=SC2034
  baihongse=${white}${on_red}
  # shellcheck disable=SC2034
  baizise=${white}${on_magenta}
  # shellcheck disable=SC2034
  heibaise=${black}${on_white}
  # shellcheck disable=SC2034
  heihuangse=${on_yellow}${black}
}

################## 检查root权限 ##################
check_root() {
  if [[ $EUID -ne 0 ]]; then
    echo -e "${red}Error:本脚本必须root账号运行，请切换root用户后再执行本脚本!${normal}"
    exit 1
  fi
}

################## 检查VPS架构 ##################
check_vz() {
  if [[ -d "/proc/vz" ]]; then
    echo -e "${red}Error:您的VPS是openVZ架构，臣妾办不到啊!${normal}"
    exit 1
  fi
}

################## 检查rclone&fclone安装情况 ##################
check_rclone() {
  #检查fclone安装状态，没装就安装
  if [ -z "$(command -v fclone)" ]; then
    echo -e "$(curr_date) ${red}fclone${normal} 不存在.正在为您安装，请稍后..."
    wget -qN https://github.com/cgkings/script-store/raw/master/tools/fclone-v0.4.1-linux-amd64.zip && unzip -qo fclone-v0.4.1-linux-amd64.zip -d /usr/bin/ && rm -f fclone-v0.4.1-linux-amd64.zip && chmod +x /usr/bin/fclone && fclone version
  fi
  #检查rclone安装状态，没装就安装
  if [ -z "$(command -v rclone)" ]; then
    echo -e "$(curr_date) ${red}rclone${normal} 不存在.正在为您安装，请稍后..."
    bash <(curl -L -s https://rclone.org/install.sh) > /dev/null
  fi
  #检查rclone的conf文件是否存在，不存在就要求你退出脚本自行配置
  if [ ! -f /root/.config/rclone/rclone.conf ]; then
    echo -e "$(curr_date) ${red}未检测到rclone配置文件.请使用<fclone config>命令配置后重新运行脚本.\n注意：配置时请不要设置root_folder_id，而是设置team_drive${normal}" && exit 1
  else
    #检查conf文件内root_folder_id是否为空，如不为空就全部清空
    [ -n "$(awk '/root_folder_id/{print $3}' ~/.config/rclone/rclone.conf)" ] && sed -i "s/root_folder_id = .*$/root_folder_id = /g" ~/.config/rclone/rclone.conf
  fi
  echo -e "${curr_date} [INFO] rclone&fclone已安装" >> /root/install_log.txt
}

################## 检查安装情况 ##################
check_release() {
  if [[ -f /etc/redhat-release ]]; then
    release='centos'
  elif grep -q -E -i "debian" /etc/issue; then
    release='debian'
  elif grep -q -E -i "armbian" /etc/issue; then
    release='armdebian'
  elif grep -q -E -i "ubuntu" /etc/issue; then
    release='ubuntu'
  elif cat  | grep -q -E -i "redhat|red hat|centos" /etc/issue; then
    release='centos'
  fi
}

check_command() {
  check_release
  # shellcheck disable=SC2034
  for command_arges in $*; do
    command_status=$(dpkg --get-selections | grep "$command_arges")
    if [ -z "$command_status" ]; then
      echo -e "$(curr_date) ${red}$command_arges${normal} 不存在.正在为您安装，请稍后..."
      if [[ "${release}" = "centos" ]]; then
        yum install "$command_arges" -y > /dev/null
        echo -e "${curr_date} [INFO] $command_arges 已完成安装动作，可使用< dpkg --get-selections | grep $command_arges >命令验证安装结果" >> /root/install_log.txt
      elif [[ "${release}" = "debian" || "${release}" = "ubuntu" || "${release}" = "armdebian" ]]; then
        apt-get install "$command_arges" -y --upgrade > /dev/null
        echo -e "${curr_date} [INFO] $command_arges 已完成安装动作，可使用< dpkg --get-selections | grep $command_arges >命令验证安装结果" >> /root/install_log.txt
      else
        echo -e "$(curr_date) ${red}对不起！您的系统暂不支持该脚本，请联系作者做定制优化，谢谢！${normal}"
        exit 1
      fi
    fi
  done
}

################## 检查目录情况 ##################
check_dir_file() {
  if [ "${1:0-1:1}" = "/" ] && [ -d "$1" ]; then
    return 0
  elif [ -f "$1" ]; then
    return 0
  fi
  return 1
}

################## 选择remote ##################[done]
remote_choose() {
  #选择remote
  rclone listremotes | grep -Eo "[0-9A-Za-z-]+" | awk '{ print FNR " " $0}' > ~/.config/rclone/remote_list.txt
  cat << EOF
${red}本地已配置remote列表:${normal}
${red} +-------------------------+${normal}
${red}$(cat /root/.config/rclone/remote_list.txt)${normal}
${red} +-------------------------+${normal}
EOF
  read -r -n1 -p "请选择用于后续操作rclone remote（输入数字即可）：" remote_choose_num
  echo
  #判断是否选择错误
  if [ -z "$(awk '{print $1}' /root/.config/rclone/remote_list.txt | grep "$remote_choose_num")" ]; then
    echo
    echo "输入不正确，请重新输入。"
    echo
    remote_choose
  else
    #选择无误，识别选择的remote
    my_remote=$(awk '{print $2}' /root/.config/rclone/remote_list.txt | sed -n "$remote_choose_num"p)
  fi
}
